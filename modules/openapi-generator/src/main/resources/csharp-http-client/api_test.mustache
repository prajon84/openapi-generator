{{>partial_header}}
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;

using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
{{#hasImport}}using {{packageName}}.{{modelPackage}};
{{/hasImport}}

namespace {{packageName}}.Test
{
    /// <summary>
    ///  Class for testing {{classname}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class {{classname}}Tests : IDisposable
    {
        private {{classname}} instance;

        public {{classname}}Tests()
        {
            instance = new {{classname}}();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of {{classname}}
        /// </summary>
        [Fact]
        public void {{operationId}}InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' {{classname}}
            //Assert.IsType<{{{classname}}}>(instance);
        }

        {{#operations}}{{#operation}}
        /// <summary>
        /// Test {{operationId}}
        /// </summary>
        [Fact]
        public void {{operationId}}AsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            {{#allParams}}
            //{{{dataType}}} {{paramName}} = default;
            {{/allParams}}
            //{{#returnType}}var response = {{/returnType}}instance.{{operationId}}Async({{#allParams}}{{paramName}}:{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            {{#returnType}}//Assert.IsType<Task<{{{returnType}}}>>(response);{{/returnType}}
        }
        {{/operation}}{{/operations}}
    }

}
